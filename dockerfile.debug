# 调试版Dockerfile - 用于详细诊断构建问题
FROM node:20-alpine AS frontend-debug
WORKDIR /app/frontend

# 安装调试工具
RUN apk add --no-cache python3 make g++ git bash findutils

# 设置npm镜像源
RUN npm config set registry https://registry.npmmirror.com

# 复制package文件
COPY frontend/package*.json ./

# 安装依赖并详细记录过程
RUN echo "=== STEP 1: Installing Dependencies ===" && \
    npm install --legacy-peer-deps && \
    echo "=== STEP 2: Dependency Installation Complete ===" && \
    echo "Total packages installed:" && \
    ls -1 node_modules/ | wc -l && \
    echo "=== STEP 3: Verifying Key Dependencies ===" && \
    echo "Vite package info:" && \
    npm list vite --depth=0 && \
    echo "Vue plugin package info:" && \
    npm list @vitejs/plugin-vue --depth=0 && \
    echo "TypeScript package info:" && \
    npm list typescript --depth=0 && \
    echo "Vue package info:" && \
    npm list vue --depth=0

# 检查node_modules结构
RUN echo "=== STEP 4: Checking node_modules Structure ===" && \
    echo "Vite binary location:" && \
    find node_modules -name "vite" -type f -executable 2>/dev/null | head -5 && \
    echo "Vue plugin location:" && \
    find node_modules -name "*plugin*vue*" -type d 2>/dev/null | head -5 && \
    echo "Checking .bin directory:" && \
    ls -la node_modules/.bin/ | grep -E "(vite|vue|tsc)" || echo "No binaries found"

# 复制源代码
COPY frontend/ ./

# 详细的环境检查
RUN echo "=== STEP 5: Environment Verification ===" && \
    echo "Node version: $(node --version)" && \
    echo "NPM version: $(npm --version)" && \
    echo "Working directory: $(pwd)" && \
    echo "Directory contents:" && \
    ls -la && \
    echo "Source directory:" && \
    ls -la src/ && \
    echo "Config files:" && \
    ls -la *.json *.ts 2>/dev/null || echo "No config files found"

# 尝试TypeScript检查
RUN echo "=== STEP 6: TypeScript Check ===" && \
    npm run type-check || echo "TypeScript check failed or not available"

# 尝试构建并捕获详细输出
RUN echo "=== STEP 7: Starting Build Process ===" && \
    echo "Attempting build:full (with TypeScript)..." && \
    (npm run build:full 2>&1 | tee build-full.log) && \
    echo "✅ build:full completed successfully" && \
    echo "Build output:" && \
    ls -la dist/ || \
    (echo "❌ build:full failed, trying standard build..." && \
     (npm run build 2>&1 | tee build-standard.log) && \
     echo "✅ standard build completed" && \
     echo "Build output:" && \
     ls -la dist/ || \
     (echo "❌ Both builds failed, analyzing errors..." && \
      echo "=== Build Full Log ===" && \
      cat build-full.log 2>/dev/null || echo "No build-full.log found" && \
      echo "=== Build Standard Log ===" && \
      cat build-standard.log 2>/dev/null || echo "No build-standard.log found" && \
      echo "=== Final Diagnostics ===" && \
      echo "Available npm scripts:" && \
      npm run || echo "Cannot list scripts" && \
      echo "Vite availability:" && \
      which vite || echo "vite not in PATH" && \
      echo "Node modules vite:" && \
      ls -la node_modules/vite/ 2>/dev/null || echo "vite module not found" && \
      echo "Trying direct node execution:" && \
      node -e "console.log('Node.js is working')" && \
      echo "Trying to require vite:" && \
      node -e "try { require('vite'); console.log('Vite can be required'); } catch(e) { console.log('Vite require error:', e.message); }" && \
      exit 1))

# 如果构建成功，显示构建结果
RUN echo "=== STEP 8: Build Results ===" && \
    if [ -d "dist" ]; then \
        echo "Build artifacts found:" && \
        find dist/ -type f -name "*.js" | wc -l && echo "JavaScript files" && \
        find dist/ -type f -name "*.css" | wc -l && echo "CSS files" && \
        find dist/ -type f -name "*.html" | wc -l && echo "HTML files" && \
        echo "Total build size:" && \
        du -sh dist/; \
    else \
        echo "No dist directory found"; \
    fi

# 生产构建阶段（仅在调试成功后使用）
FROM python:3.11-slim
WORKDIR /app

# 安装Python依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential curl && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY backend ./backend
COPY entrypoint.sh .
RUN chmod +x entrypoint.sh

# 复制前端构建结果（注意：这步只有在调试阶段成功后才会执行）
COPY --from=frontend-debug /app/frontend/dist ./frontend/dist
COPY frontend/package.json ./frontend/

VOLUME ["/app/data", "/media", "/strm"]
EXPOSE 35455

ENTRYPOINT ["./entrypoint.sh"]
